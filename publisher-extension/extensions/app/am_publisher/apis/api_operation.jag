<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

require('/modules/publisher.js').exec(function (ctx) {
	var log = new Log('asset_api_endpoints');
	var ref = require('utils').request;
	var responseProcessor = require('utils').response;
	var req = ctx.request;
	var session = ctx.session;
	var apiPublisher = require('apipublisher').apipublisher.APIProviderFact(session.get("LOG"));
	var uriMatcher = new URIMatcher(req.getRequestURI());
	var assetApi = require('/modules/asset-api.js').api;
	var lcApi = require('/modules/lifecycle/lifecycle-api.js').api;
	var method = req.getMethod();
	var options = ref.getQueryOptions(req.getQueryString());
	var response = ctx.response;
	response.contentType = 'application/json';
	var DELETE_API_URL = '/{context}/apis/{id}';

	var constants = require("rxt").constants;

	switch (method) {
		case 'POST':// POST endpoints
			break;

		case 'GET':// GET endpoints
			break;

		case 'DELETE': // DELETE endpoints
			if (uriMatcher.match(DELETE_API_URL)) {
				try {
					apiPublisher.APIProviderFactory.init(session.get())
					var apiId = uriMatcher.elements().id;
					var done = assetApi.deleteAPI(apiId);
					if (done) {
						response = responseProcessor.buildSuccessResponse(response,
																		  constants.STATUS_CODES.OK, "Asset Deleted Successfully");
					} else {
						response = responseProcessor.buildErrorResponse(response,
																		constants.STATUS_CODES.INTERNAL_SERVER_ERROR, "Unable to Delete Asset of id:" +
																													  options.id);
					}
				} catch (e) {
					log.error(e);
					response = responseProcessor.buildErrorResponse(response,
																	constants.STATUS_CODES.INTERNAL_SERVER_ERROR, "An error occurred while deleting asset");
				}
			} else {
				response = responseProcessor.buildErrorResponse(response,
																constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this DELETE endpoint');
			}
			break;

		default://other un-implemented endpoints
			response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
															'The endpoint that you have requested is not implemented for the ' + method +
															' method.Try making the request with the appropriate verb' +
															'(hint: create/update operations use POST).');
	}
}, request, response, session); %>
